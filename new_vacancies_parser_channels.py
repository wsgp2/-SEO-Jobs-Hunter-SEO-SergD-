"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö SEO –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤
"""

import asyncio
from datetime import datetime, timezone, timedelta
from loguru import logger
import os
import pandas as pd
from telethon import TelegramClient, events
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from parse_channels import analyze_message as original_analyze_message
from parse_channels import is_seo_vacancy as original_is_seo_vacancy
from telegram_notifier import send_vacancy_notification
from seo_channels import SEO_CHANNELS

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_ID = os.getenv('API_ID')
API_HASH = os.getenv('API_HASH')
PHONE = os.getenv('PHONE')
SEO_FILE = 'seo_vacancies.xlsx'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger.add(
    "parser.log",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {module}:{function}:{line} - {message}",
    level="DEBUG",
    rotation="1 week"
)

async def is_message_processed(channel_id: int, message_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"""
    try:
        if not os.path.exists(SEO_FILE):
            return False
            
        df = pd.read_excel(SEO_FILE)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        if 'channel_id' not in df.columns or 'message_id' not in df.columns:
            return False
            
        return any((df['channel_id'] == channel_id) & (df['message_id'] == message_id))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return False

async def save_vacancy_to_excel(vacancy_data: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ Excel —Ñ–∞–π–ª"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if 'channel_id' not in vacancy_data or 'message_id' not in vacancy_data:
            logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è channel_id –∏–ª–∏ message_id")
            return
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Excel —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DataFrame
        if os.path.exists(SEO_FILE):
            df = pd.read_excel(SEO_FILE)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            if 'channel_id' not in df.columns:
                df['channel_id'] = None
            if 'message_id' not in df.columns:
                df['message_id'] = None
        else:
            df = pd.DataFrame()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        if df.empty or not any((df['channel_id'] == vacancy_data['channel_id']) & 
                              (df['message_id'] == vacancy_data['message_id'])):
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é
            vacancy_data['contains_seo_vacancy'] = True  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ SEO –≤–∞–∫–∞–Ω—Å–∏–∏
            new_df = pd.DataFrame([vacancy_data])
            df = pd.concat([df, new_df], ignore_index=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            df.to_excel(SEO_FILE, index=False)
            logger.info("üíæ –í–∞–∫–∞–Ω—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Excel")
        else:
            logger.debug("‚ÑπÔ∏è –í–∞–∫–∞–Ω—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Excel")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Excel: {str(e)}")

async def check_recent_messages(client, channel_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        week_ago = datetime.now() - timedelta(days=7)
        logger.debug(f"üïí –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å {week_ago} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        message_count = 0
        seo_count = 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 1000)
        channel_name = ""
        try:
            channel = await client.get_entity(channel_id)
            channel_name = getattr(channel, 'title', str(channel_id))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {str(e)}")
            channel_name = str(channel_id)
            
        logger.info(f"üì∫ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª: {channel_name}")
        
        async for message in client.iter_messages(channel_id, offset_date=week_ago, reverse=True, limit=2000):
            message_count += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not await is_message_processed(channel_id, message.id):
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                message_text = message.text or ''
                if not message_text.strip():
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                keywords = ['seo', '—Å–µ–æ', '—Å—ç–æ']
                found_keywords = [kw for kw in keywords if kw in message_text.lower()]
                if found_keywords:
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ {', '.join(found_keywords)} –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {message.id} –≤ –∫–∞–Ω–∞–ª–µ {channel_name}")
                    
                logger.debug(f"üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞ SEO –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –Ω–∞–ø–∏—Å–∞–Ω–∏—è
                if any(variant in message_text.lower() for variant in ['seo', '—Å–µ–æ', '—Å—ç–æ']):
                    seo_count += 1
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å SEO –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SEO-—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
                    is_seo, reason = original_is_seo_vacancy(message_text)
                    if is_seo:
                        try:
                            # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ GPT
                            analysis_result = original_analyze_message(message_text)
                            
                            if isinstance(analysis_result, dict) and analysis_result.get('is_seo', False):
                                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                                vacancy_data = {
                                    'text': message_text,
                                    'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                                    'message_link': f"https://t.me/c/{channel_id}/{message.id}",
                                    'channel_name': message.chat.title if hasattr(message.chat, 'title') else str(channel_id),
                                    'views': getattr(message, 'views', 0) or 0,
                                    'forwards': getattr(message, 'forwards', 0) or 0,
                                    'contacts': analysis_result.get('contacts'),
                                    'salary': analysis_result.get('salary'),
                                    'channel_id': channel_id,
                                    'message_id': message.id
                                }
                                
                                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                                await send_vacancy_notification(vacancy_data)
                                
                                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
                                await save_vacancy_to_excel(vacancy_data)
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ GPT: {str(e)}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ {channel_id}: {str(e)}")

async def monitor_new_vacancies():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤ –∫–∞–Ω–∞–ª–∞—Ö"""
    logger.info("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–π...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    logger.info(f"üîë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞ (API ID: {API_ID})")
    client = TelegramClient('seo_parser_session', API_ID, API_HASH)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
    channels_to_monitor = []
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
        logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
        await client.connect()
        
        if not await client.is_user_authorized():
            logger.info("üîí –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
            await client.start(phone=PHONE)
        
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Telegram")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ SEO_CHANNELS
        for channel in SEO_CHANNELS:
            try:
                entity = await client.get_entity(channel['username'])
                channels_to_monitor.append(entity.id)
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª {channel['name']} (ID: {entity.id})")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞ {channel['name']}: {e}")
        
        logger.info(f"üì± –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤: {channels_to_monitor}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        logger.info("üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞...")
        for channel_id in channels_to_monitor:
            await check_recent_messages(client, channel_id)
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @client.on(events.NewMessage(chats=channels_to_monitor))
        async def handle_new_message(event):
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
                if await is_message_processed(event.chat_id, event.message.id):
                    logger.debug(f"üîÑ –°–æ–æ–±—â–µ–Ω–∏–µ {event.message.id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                message_text = event.message.text or ''
                if not message_text.strip():
                    logger.debug("‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    return
                
                logger.info(f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {event.chat_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞ SEO –≤ —Ç–µ–∫—Å—Ç–µ
                if any(variant in message_text.lower() for variant in ['seo', '—Å–µ–æ', '—Å—ç–æ']):
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SEO-—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
                    is_seo, reason = original_is_seo_vacancy(message_text)
                    if is_seo:
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è SEO –≤–∞–∫–∞–Ω—Å–∏—è: {reason}")
                    
                        try:
                            # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ GPT
                            logger.debug("üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ GPT...")
                            analysis_result = original_analyze_message(message_text)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
                            logger.debug(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {analysis_result}")
                            
                            if isinstance(analysis_result, dict) and analysis_result.get('is_seo', False):
                                logger.info(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ GPT: {analysis_result.get('reason', 'No reason provided')}")
                                
                                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                                vacancy_data = {
                                    'text': message_text,
                                    'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                                    'message_link': f"https://t.me/c/{event.chat_id}/{event.message.id}",
                                    'channel_name': event.chat.title if hasattr(event.chat, 'title') else str(event.chat_id),
                                    'views': getattr(event.message, 'views', 0) or 0,
                                    'forwards': getattr(event.message, 'forwards', 0) or 0,
                                    'contacts': analysis_result.get('contacts'),
                                    'salary': analysis_result.get('salary'),
                                    'channel_id': event.chat_id,
                                    'message_id': event.message.id
                                }
                                
                                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                                await send_vacancy_notification(vacancy_data)
                                logger.info("üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                                
                                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
                                await save_vacancy_to_excel(vacancy_data)
                                
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ GPT: {str(e)}")
                    else:
                        logger.debug(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É SEO: {reason}")
                else:
                    logger.debug("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç SEO")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        logger.info("üì° –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
        await client.run_until_disconnected()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
    finally:
        await client.disconnect()

if __name__ == "__main__":
    asyncio.run(monitor_new_vacancies())
